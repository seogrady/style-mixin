{"name":"StyleMixin","tagline":"Style mixins for JavasScript","body":"StyleMixin\r\n===========\r\n\r\nInline style mixins for JavaScript. Ideally used with ReactJS [inline styles](https://facebook.github.io/react/tips/inline-styles.html)\r\n\r\nInstall with npm or Bower.\r\n\r\n```sh\r\nnpm install style-mixin\r\n```\r\n\r\nUse with node.js, browserify or webpack. Alternatively, you can simply include `index.js` on your page with a standalone `<script>` tag and it will export a global `styleMixin` method, or define the module if you are using RequireJS.\r\n\r\nExample:\r\n```js\r\nvar s = require('style-mixin/mixins'),\r\n    m = require('style-mixin')(s);\r\n\r\nvar styles = m({\r\n  background:'blue',\r\n  $borderRadius:'3px'\r\n}); // => {background: \"blue\", WebkitBorderRadius: \"3px\", borderRadius: \"3px\", backgroundClip: \"padding-box\"}\r\n```\r\n\r\nThe utility helper comes with a few mixins that can be included via `require('style-mixin/mixins')`.  Please have a look at [src/mixins.js](src/mixins.js) for examples of mixin functions. Please feel free to contribute by converting existing less/sass mixins over to JavaScript.\r\n\r\n## Usage\r\n\r\nThe `m` function gets initialized by passing a collection of mixins to `mixin`.  The `m` function takes any number of arguments which can be a string or object. The argument `'$mixin'` is short for `{ $mixin: null }`. Keys that start with `$` will resolve a corresponding mixin.\r\n\r\n```js\r\nimport mixin from 'style-mixin';\r\n\r\nlet m = mixin({\r\n  borderRadius: function($radius = '3px') {\r\n    return {\r\n      WebkitBorderRadius: $radius,\r\n      borderRadius: $radius,\r\n      backgroundClip: 'padding-box' /* stops bg color from leaking outside the border: */\r\n    }\r\n  }\r\n});\r\n\r\nvar styles = m({\r\n  background:'red'\r\n}, '$borderRadius'); // => {background: \"red\", WebkitBorderRadius: \"3px\", borderRadius: \"3px\", backgroundClip: \"padding-box\"}\r\n```\r\n\r\nStyle properties will be overridden from right to left.  If you pass in a mixin name or style object, the last object properties will take precendence.\r\n\r\n```js\r\nimport mixin from 'style-mixin';\r\nimport mixins from 'style-mixin/mixins';\r\n\r\nObject.assign(mixins, {\r\n  button: function($fontsize = '12px') {\r\n    return {\r\n      fontSize: $fontsize,\r\n      color: 'white',\r\n      background: 'blue',\r\n      $borderRadius: '3px'\r\n    }\r\n  }\r\n});\r\n\r\nlet m = mixin(mixins);\r\n\r\nvar styles = m('$button', { background:'red' }); // => {background: \"red\", fontSize: \"12px\", color: \"white\", WebkitBorderRadius: \"3px\", borderRadius: \"3px\", backgroundClip: \"padding-box\"}\r\n```\r\n\r\nIf you pass an array of properties to a mixin function they will passed as arguments.\r\n\r\n```js\r\nObject.assign(mixins, {\r\n  absPos: function($top = 0, $right = 0, $bottom = 0, $left = 0) {\r\n    return {\r\n      top: $top,\r\n      right: $right,\r\n      bottom: $bottom,\r\n      left: $left,\r\n      position: absolute\r\n    }\r\n  }\r\n});\r\n\r\nlet m = mixin(mixins);\r\n\r\nvar styles = m({\r\n  background:'red',\r\n  $absPos:['23px', '43px', '3px', '-33px']\r\n}); // => {background: \"red\", top: \"23px\", right: \"43px\", bottom: \"3px\", left: \"-33px\", position: \"absolute\"}\r\n```\r\n\r\n## Polyfills needed to support older browsers\r\n\r\n`Object.assign`: see [MDN](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)\r\n\r\n`Array.isArray`: see [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray)\r\n\r\n## Contribute\r\n\r\nWould you like to take part of the discussion? Open up an issue or pull request.\r\n\r\n## License\r\n\r\n[MIT](LICENSE)\r\n","google":"UA-24356782-6","note":"Don't delete this file! It's used internally to help with page regeneration."}